name: üîç Analyse de S√©curit√©

on:
  workflow_call:
    secrets:
      EMAIL_FROM:
        required: true
      EMAIL_PWD:
        required: true
      REPORT_TO:
        required: true

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup environment
        run: |
          mkdir -p .github/reports
          echo "$HOME/.kubescape/bin" >> $GITHUB_PATH

      - name: Install Kubescape
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | bash
          kubescape version
          echo "Version install√©e: $(kubescape version)"

      - name: Find and verify Kubernetes manifests
        id: find-manifests
        run: |
          # Trouver tous les fichiers YAML/yml sauf les r√©sultats pr√©c√©dents
          MANIFESTS=$(find . -name '*.yaml' -o -name '*.yml' | grep -v 'scan-results' | tr '\n' ' ')
          
          if [ -z "$MANIFESTS" ]; then
            echo "::error::Aucun manifest Kubernetes trouv√©!"
            echo "Liste des fichiers trouv√©s:"
            find . -type f | head -20
            exit 1
          fi
          
          echo "Fichiers √† analyser:"
          echo "$MANIFESTS" | tr ' ' '\n'
          echo "MANIFESTS=${MANIFESTS}" >> $GITHUB_OUTPUT

      - name: Run Kubescape scan with debug
        run: |
          echo "Ex√©cution du scan sur: ${{ steps.find-manifests.outputs.MANIFESTS }}"
          
          # Ex√©cuter avec debug et capture compl√®te de la sortie
          kubescape scan ${{ steps.find-manifests.outputs.MANIFESTS }} \
            --format json \
            --output .github/reports/scan-results.json \
            2>&1 | tee scan-debug.log
          
          # V√©rifier le contenu du rapport
          echo "Contenu du rapport:"
          cat .github/reports/scan-results.json
          
          if [ ! -s ".github/reports/scan-results.json" ]; then
            echo "::error::Le rapport est vide!"
            echo "Logs de debug:"
            cat scan-debug.log
            exit 1
          fi

      - name: Validate and save report
        run: |
          # Valider que le JSON est valide
          jq empty .github/reports/scan-results.json
          
          # Sauvegarder avec timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          cp .github/reports/scan-results.json .github/reports/scan-results-$TIMESTAMP.json
          echo "Rapport sauvegard√© sous: scan-results-$TIMESTAMP.json"

      - name: Send report
        env:
          GMAIL_USER: ${{ secrets.EMAIL_FROM }}
          GMAIL_PASSWORD: ${{ secrets.EMAIL_PWD }}
          REPORT_EMAIL: ${{ secrets.REPORT_TO }}
        run: |
          echo "Envoi du rapport..."
          python .github/scripts/scanning/send-report.py
