name: Kubernetes Security Scan with Goat Deployment

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  CLUSTER_SCAN_OUTPUT: "cluster-scan-results.json"
  FILTERED_SCAN_OUTPUT: "filtered-scan-results.json"
  MINIKUBE_VERSION: "v1.32.0"
  KUBESCAPE_VERSION: "v3.0.10"
  KUBERNETES_GOAT_VERSION: "master"
  MINIKUBE_WAIT_TIMEOUT: "5m"
  NOTIFICATION_RECIPIENTS: "najah.wchem@etudiant-isi.utm.tn,saber.fraj@etudiant-isi.utm.tn"

jobs:
  security-scan:
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.minikube/cache
            ~/.kubescape
            /tmp/kubernetes-goat
          key: ${{ runner.os }}-k8s-${{ env.MINIKUBE_VERSION }}-${{ env.KUBESCAPE_VERSION }}-${{ env.KUBERNETES_GOAT_VERSION }}

      - name: Configure system
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y --no-install-recommends \
            conntrack socat curl jq git
          sudo swapoff -a 2>/dev/null || true

      - name: Install Minikube and dependencies
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          chmod +x minikube
          sudo install minikube /usr/local/bin/minikube
          minikube version
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo install kubectl /usr/local/bin/kubectl

      - name: Start Minikube cluster with extra resources
        run: |
          minikube start \
            --driver=docker \
            --container-runtime=containerd \
            --kubernetes-version=stable \
            --wait=all \
            --wait-timeout=${{ env.MINIKUBE_WAIT_TIMEOUT }} \
            --memory=6144 \
            --cpus=4 \
            --disk-size=20g \
            --addons=metrics-server \
            --delete-on-failure
          
          kubectl cluster-info

      - name: Deploy Kubernetes Goat
        run: |
          git clone --depth 1 --branch ${{ env.KUBERNETES_GOAT_VERSION }} \
            https://github.com/SABERNAJEH/PFEMADHUALA.git /tmp/kubernetes-goat
          
          cd /tmp/kubernetes-goat
          bash setup-kubernetes-goat.sh -y
          
          echo "Kubernetes Goat scenarios deployed:"
          kubectl get pods --all-namespaces

      - name: Install Kubescape
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
          echo "$HOME/.kubescape/bin" >> $GITHUB_PATH
          export PATH="$HOME/.kubescape/bin:$PATH"
          kubescape version

      - name: Run comprehensive security scan
        run: |
          # Ensure kubescape is in PATH
          export PATH="$HOME/.kubescape/bin:$PATH"
          
          # Scan the entire cluster including Kubernetes Goat deployments
          kubescape scan \
            --enable-host-scan \
            --format json \
            --verbose \
            --output ${{ env.CLUSTER_SCAN_OUTPUT }} \
            || echo "Scan completed with exit code $?"
          
          # Format and filter JSON output to keep only failed controls
          if [ -f "${{ env.CLUSTER_SCAN_OUTPUT }}" ]; then
            jq 'walk(if type == "object" then with_entries(select(.value.status == "failed" or .value.status == "FAILED")) else . end)' \
              "${{ env.CLUSTER_SCAN_OUTPUT }}" > "${{ env.FILTERED_SCAN_OUTPUT }}"
            
            # Extract critical findings count from filtered results
            CRITICAL_FINDINGS=$(jq '[.. | select(.severity? == "critical" and (.status == "failed" or .status == "FAILED"))] | length' "${{ env.FILTERED_SCAN_OUTPUT }}")
            echo "CRITICAL_FINDINGS=$CRITICAL_FINDINGS" >> $GITHUB_ENV
          else
            echo "CRITICAL_FINDINGS=0" >> $GITHUB_ENV
          fi

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ github.run_id }}
          path: ${{ env.FILTERED_SCAN_OUTPUT }}
          retention-days: 3

      - name: Send notification with scan summary
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          secure: true
          subject: "Kubernetes Security Scan Report - ${{ github.repository }} (Failed Only)"
          body: |
            Kubernetes security scan completed with results:
            
            - Cluster: Minikube with Kubernetes Goat
            - Critical Findings: ${{ env.CRITICAL_FINDINGS || '0' }}
            - Only failed security controls are included in the attached report
            
            Scan details:
            - Kubescape version: ${{ env.KUBESCAPE_VERSION }}
            - Timestamp: $(date -u)
          from: ${{ secrets.GMAIL_USERNAME }}
          to: ${{ env.NOTIFICATION_RECIPIENTS }}
          attachments: ${{ env.FILTERED_SCAN_OUTPUT }}

      - name: Cleanup Kubernetes Goat
        if: always()
        run: |
          cd /tmp/kubernetes-goat && \
          bash reset-kubernetes-goat.sh || true

      - name: Cleanup Minikube cluster
        if: always()
        run: |
          minikube delete --all --purge
          sudo rm -rf ~/.minikube ~/.kube /tmp/kubernetes-goat
