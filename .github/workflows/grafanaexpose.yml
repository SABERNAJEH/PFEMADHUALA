name: Kubernetes Security Scan with Goat Deployment and Grafana Dashboard

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  CLUSTER_SCAN_OUTPUT: "cluster-scan-results.json"
  PROMETHEUS_FILE: "kubescape-metrics.prom"
  GRAFANA_DASHBOARD_FILE: "kubescape-dashboard.json"
  MINIKUBE_VERSION: "v1.32.0"
  KUBESCAPE_VERSION: "v3.0.10"
  KUBERNETES_GOAT_VERSION: "master"
  MINIKUBE_WAIT_TIMEOUT: "5m"
  NOTIFICATION_RECIPIENTS: "najah.wchem@etudiant-isi.utm.tn,saber.fraj@etudiant-isi.utm.tn"

jobs:
  security-scan:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.minikube/cache
            ~/.kubescape
            /tmp/kubernetes-goat
          key: ${{ runner.os }}-k8s-${{ env.MINIKUBE_VERSION }}-${{ env.KUBESCAPE_VERSION }}-${{ env.KUBERNETES_GOAT_VERSION }}

      - name: Configure system
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y --no-install-recommends \
            conntrack socat curl jq git python3-pip
          pip install prometheus-client
          sudo swapoff -a 2>/dev/null || true

      - name: Install Minikube and dependencies
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          chmod +x minikube
          sudo install minikube /usr/local/bin/minikube
          minikube version
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/kubectl

      - name: Start Minikube cluster with monitoring stack
        run: |
          minikube start \
            --driver=docker \
            --container-runtime=containerd \
            --kubernetes-version=stable \
            --wait=all \
            --wait-timeout=${{ env.MINIKUBE_WAIT_TIMEOUT }} \
            --memory=8192 \
            --cpus=4 \
            --disk-size=20g \
            --addons=metrics-server \
            --delete-on-failure
          
          # Install Prometheus and Grafana
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set grafana.adminPassword="admin" \
            --set prometheus.service.nodePort=30090 \
            --set grafana.service.type=NodePort \
            --wait

      - name: Deploy Kubernetes Goat
        run: |
          git clone --depth 1 --branch ${{ env.KUBERNETES_GOAT_VERSION }} \
            https://github.com/madhuakula/kubernetes-goat.git /tmp/kubernetes-goat
          
          cd /tmp/kubernetes-goat
          bash setup-kubernetes-goat.sh -y
          
          echo "Kubernetes Goat scenarios deployed:"
          kubectl get pods --all-namespaces

      - name: Install Kubescape
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
          echo "$HOME/.kubescape/bin" >> $GITHUB_PATH
          $HOME/.kubescape/bin/kubescape version

      - name: Run comprehensive security scan
        run: |
          # Run scan with error handling
          set +e
          $HOME/.kubescape/bin/kubescape scan \
            --enable-host-scan \
            --format json \
            --verbose \
            --output ${{ env.CLUSTER_SCAN_OUTPUT }}
          SCAN_EXIT_CODE=$?
          set -e
          
          echo "Scan completed with exit code $SCAN_EXIT_CODE"
          
          # Process scan results
          if [ -f "${{ env.CLUSTER_SCAN_OUTPUT }}" ]; then
            # Format JSON output
            jq '.' "${{ env.CLUSTER_SCAN_OUTPUT }}" > temp.json && mv temp.json "${{ env.CLUSTER_SCAN_OUTPUT }}"
            
            # Debug output structure
            echo "Scan output structure:"
            jq 'keys' "${{ env.CLUSTER_SCAN_OUTPUT }}"
            
            # Convert to Prometheus metrics
            python3 <<EOF
            import json, os
            from pathlib import Path
            
            def process_results(data):
                metrics = []
                if 'results' in data:  # New format
                    for result in data['results']:
                        for control in result.get('controls', []):
                            metrics.append(format_metric(control))
                elif 'controls' in data:  # Old format
                    for control in data['controls']:
                        metrics.append(format_metric(control))
                return metrics
            
            def format_metric(control):
                control_id = control.get("controlID", "unknown").replace('"', '\\"')
                name = control.get("name", "unknown").replace('"', '\\"')
                status = 1 if control.get("status") == "passed" else 0
                return f'kubescape_control_status{{id="{control_id}",name="{name}"}} {status}'
            
            try:
                with open(os.getenv('CLUSTER_SCAN_OUTPUT')) as f:
                    data = json.load(f)
                
                metrics = process_results(data)
                
                if not metrics:
                    raise ValueError("No valid control data found in scan results")
                
                Path(os.getenv('PROMETHEUS_FILE')).write_text('\n'.join(metrics))
                print(f"Successfully generated {len(metrics)} metrics")
                
            except Exception as e:
                print(f"Error processing scan results: {str(e)}")
                exit(1)
            EOF
            
            # Extract critical findings
            CRITICAL_FINDINGS=$(jq '[.summary_details.numberOfCriticalSeverity, .summary."numberOfCriticalSeverity"] | map(select(. != null)) | first // 0' "${{ env.CLUSTER_SCAN_OUTPUT }}")
            echo "CRITICAL_FINDINGS=$CRITICAL_FINDINGS" >> $GITHUB_ENV
          else
            echo "Error: Scan output file not found!"
            exit 1
          fi

      - name: Push metrics to Prometheus
        run: |
          # Deploy Pushgateway
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pushgateway
            namespace: monitoring
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: pushgateway
            template:
              metadata:
                labels:
                  app: pushgateway
              spec:
                containers:
                - name: pushgateway
                  image: prom/pushgateway
                  ports:
                  - containerPort: 9091
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: pushgateway
            namespace: monitoring
          spec:
            selector:
              app: pushgateway
            ports:
              - protocol: TCP
                port: 9091
                targetPort: 9091
            type: NodePort
          EOF
          
          kubectl wait --for=condition=available -n monitoring deployment/pushgateway --timeout=2m
          
          # Push metrics
          PUSHGATEWAY_URL="http://$(minikube ip):$(kubectl get svc -n monitoring pushgateway -o jsonpath='{.spec.ports[0].nodePort}')"
          curl -X POST -H "Content-Type: text/plain" \
            --data-binary @${{ env.PROMETHEUS_FILE }} \
            "$PUSHGATEWAY_URL/metrics/job/kubescape_scan" || echo "Warning: Failed to push metrics"

      - name: Configure Grafana Dashboard
        run: |
          # Create comprehensive dashboard
          cat > ${{ env.GRAFANA_DASHBOARD_FILE }} <<EOF
          {
            "dashboard": {
              "title": "Kubescape Security Dashboard",
              "panels": [
                {
                  "title": "Compliance Score",
                  "type": "gauge",
                  "gridPos": {"x": 0, "y": 0, "w": 8, "h": 6},
                  "targets": [{
                    "expr": "avg(kubescape_control_status) * 100",
                    "format": "percent"
                  }]
                },
                {
                  "title": "Controls by Severity",
                  "type": "piechart",
                  "gridPos": {"x": 8, "y": 0, "w": 8, "h": 6},
                  "targets": [{
                    "expr": "count by (severity) (kubescape_control_status)"
                  }]
                },
                {
                  "title": "Failed Controls",
                  "type": "table",
                  "gridPos": {"x": 0, "y": 6, "w": 16, "h": 8},
                  "targets": [{
                    "expr": "kubescape_control_status == 0",
                    "format": "table"
                  }]
                }
              ]
            }
          }
          EOF
          
          # Get Grafana access details
          GRAFANA_URL="http://$(minikube ip):$(kubectl get svc -n monitoring monitoring-grafana -o jsonpath='{.spec.ports[0].nodePort}')"
          
          # Wait for Grafana
          until curl -s $GRAFANA_URL; do sleep 1; done
          
          # Import dashboard
          curl -X POST -H "Content-Type: application/json" \
            -d @${{ env.GRAFANA_DASHBOARD_FILE }} \
            "$GRAFANA_URL/api/dashboards/db" \
            -u admin:admin || echo "Warning: Failed to import dashboard"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ github.run_id }}
          path: |
            ${{ env.CLUSTER_SCAN_OUTPUT }}
            ${{ env.PROMETHEUS_FILE }}
            ${{ env.GRAFANA_DASHBOARD_FILE }}
          retention-days: 3

      - name: Send notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          secure: true
          subject: "Kubernetes Security Scan Completed - ${{ github.repository }}"
          body: |
            Security scan results:
            
            - Critical Findings: ${{ env.CRITICAL_FINDINGS || 'N/A' }}
            - Grafana Dashboard: http://$(minikube ip):$(kubectl get svc -n monitoring monitoring-grafana -o jsonpath='{.spec.ports[0].nodePort'})
            - Credentials: admin/admin
            
            Full report attached.
          from: ${{ secrets.GMAIL_USERNAME }}
          to: ${{ env.NOTIFICATION_RECIPIENTS }}
          attachments: ${{ env.CLUSTER_SCAN_OUTPUT }}

      - name: Cleanup resources
        if: always()
        run: |
          # Reset Kubernetes Goat
          cd /tmp/kubernetes-goat && bash reset-kubernetes-goat.sh || true
          
          # Full cleanup
          minikube delete --all --purge
          sudo rm -rf ~/.minikube ~/.kube /tmp/kubernetes-goat
