name: Kubernetes Security Scan with Grafana Integration

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  CLUSTER_SCAN_OUTPUT: "cluster-scan-results.json"
  GRAFANA_ADMIN_PASSWORD: "admin@123"  # Mot de passe plus sécurisé
  GRAFANA_DASHBOARD_ID: "18665"  # ID du dashboard Kubescape officiel
  MINIKUBE_VERSION: "v1.32.0"
  KUBESCAPE_VERSION: "v3.0.10"

jobs:
  security-scan:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Minikube with Grafana
        run: |
          # Install Minikube
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          chmod +x minikube
          sudo install minikube /usr/local/bin/minikube

          # Start cluster with Grafana
          minikube start \
            --driver=docker \
            --memory=8192 \
            --cpus=4 \
            --addons=grafana \
            --extra-config=apiserver.service-account-issuer=kubernetes.default.svc \
            --extra-config=apiserver.service-account-signing-key-file=/var/lib/minikube/certs/apiserver.key

          # Expose Grafana
          kubectl patch svc grafana -n kubernetes-dashboard \
            --type='json' \
            -p='[{"op": "replace", "path": "/spec/type", "value": "NodePort"}]'
          
          # Get Grafana credentials
          echo "GRAFANA_URL=http://$(minikube ip):$(kubectl get svc grafana -n kubernetes-dashboard -o jsonpath='{.spec.ports[0].nodePort}')" >> $GITHUB_ENV
          echo "GRAFANA_CREDS=admin:${{ env.GRAFANA_ADMIN_PASSWORD }}" >> $GITHUB_ENV

      - name: Install Kubescape
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
          echo "$HOME/.kubescape/bin" >> $GITHUB_PATH
          kubescape version

      - name: Run security scan
        run: |
          kubescape scan \
            --enable-host-scan \
            --format json \
            --output ${{ env.CLUSTER_SCAN_OUTPUT }} \
            --exclude-namespaces kube-system,kubernetes-dashboard

          # Convert to Prometheus metrics
          jq -r '.controls[] | "kubescape_control_status{id=\"\(.controlID)\",name=\"\(.name)\"} \(if .status == "passed" then 1 else 0 end)"' \
            ${{ env.CLUSTER_SCAN_OUTPUT }} > metrics.prom

      - name: Setup Prometheus and Pushgateway
        run: |
          # Install Prometheus
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm install prometheus prometheus-community/prometheus \
            --set pushgateway.enabled=true \
            --set server.service.type=NodePort

          # Push metrics
          kubectl wait --for=condition=available deployment/prometheus-pushgateway --timeout=2m
          curl -X POST \
            --data-binary @metrics.prom \
            http://$(minikube ip):$(kubectl get svc prometheus-pushgateway -o jsonpath='{.spec.ports[0].nodePort}')/metrics/job/kubescape

      - name: Configure Grafana Dashboard
        run: |
          # Import official Kubescape dashboard
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"dashboard": {"id": null, "uid": null, "title": "Kubescape Security Dashboard"}}' \
            "$GRAFANA_URL/api/dashboards/import/${{ env.GRAFANA_DASHBOARD_ID }}" \
            -u $GRAFANA_CREDS

          # Configure Prometheus datasource
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"Prometheus","type":"prometheus","url":"http://prometheus-server:80","access":"proxy"}' \
            "$GRAFANA_URL/api/datasources" \
            -u $GRAFANA_CREDS

      - name: Share Grafana access
        run: |
          echo "Grafana Dashboard: $GRAFANA_URL"
          echo "Username: admin"
          echo "Password: ${{ env.GRAFANA_ADMIN_PASSWORD }}"
          
          # Create access file
          cat > grafana-access.txt <<EOF
          Grafana Dashboard: $GRAFANA_URL
          Username: admin
          Password: ${{ env.GRAFANA_ADMIN_PASSWORD }}
          EOF

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            ${{ env.CLUSTER_SCAN_OUTPUT }}
            grafana-access.txt
          retention-days: 7

      - name: Send notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          subject: "Kubernetes Security Scan Results"
          body: |
            Security scan completed!
            
            Access Grafana dashboard: $GRAFANA_URL
            Credentials: admin/${{ env.GRAFANA_ADMIN_PASSWORD }}
            
            Scan results are attached.
          from: ${{ secrets.GMAIL_USERNAME }}
          to: ${{ env.NOTIFICATION_RECIPIENTS }}
          attachments: ${{ env.CLUSTER_SCAN_OUTPUT }}
