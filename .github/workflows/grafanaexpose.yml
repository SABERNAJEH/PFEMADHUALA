name: Kubernetes Security Scan with Stable Grafana Access

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  CLUSTER_SCAN_OUTPUT: "cluster-scan-results.json"
  GRAFANA_ADMIN_PASSWORD: "Admin@Secure123"
  MINIKUBE_VERSION: "v1.32.0"
  KUBESCAPE_VERSION: "v3.0.10"
  GRAFANA_PORT: "3000"

jobs:
  security-scan:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Configure system (optimized dependency handling)
        run: |
          # Nettoyage des paquets problématiques
          sudo apt-get update -qq
          sudo apt-get purge -qq -y docker.io docker-ce || true
          sudo apt-get autoremove -qq -y
          
          # Installation sécurisée des dépendances
          sudo apt-get install -qq -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            conntrack \
            socat \
            jq \
            apt-transport-https
          
          # Ajout du dépôt Docker officiel
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Installation propre de Docker
          sudo apt-get update -qq
          sudo apt-get install -qq -y docker-ce docker-ce-cli containerd.io
          sudo systemctl enable --now docker
          sudo usermod -aG docker $USER

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          chmod +x minikube
          sudo install minikube /usr/local/bin/minikube
          minikube version

      - name: Start Minikube with Grafana
        run: |
          minikube start \
            --driver=docker \
            --memory=8192 \
            --cpus=4 \
            --addons=metrics-server \
            --wait=all

          # Install Helm if not exists
          if ! command -v helm &> /dev/null; then
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi

          # Install Grafana securely
          helm repo add grafana https://grafana.github.io/helm-charts --force-update
          helm repo update
          kubectl create namespace grafana || true
          
          helm upgrade --install grafana grafana/grafana \
            --namespace grafana \
            --set persistence.enabled=true \
            --set adminPassword="${{ env.GRAFANA_ADMIN_PASSWORD }}" \
            --set service.type=NodePort \
            --set service.nodePort=${{ env.GRAFANA_PORT }} \
            --wait

          # Get Minikube IP
          MINIKUBE_IP=$(minikube ip)
          echo "GRAFANA_URL=http://$MINIKUBE_IP:${{ env.GRAFANA_PORT }}" >> $GITHUB_ENV

      - name: Install Kubescape
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
          echo "$HOME/.kubescape/bin" >> $GITHUB_PATH
          kubescape version

      - name: Run security scan
        run: |
          kubescape scan \
            --enable-host-scan \
            --format json \
            --output ${{ env.CLUSTER_SCAN_OUTPUT }} \
            --exclude-namespaces kube-system,grafana

      - name: Expose Grafana access
        run: |
          # Start port-forwarding
          nohup kubectl port-forward -n grafana svc/grafana 3000:3000 > /dev/null 2>&1 &
          
          echo "=============================================="
          echo "GRAFANA DASHBOARD ACCESS"
          echo "Direct URL (if runner has public IP): $GRAFANA_URL"
          echo "Local port-forward: http://localhost:3000"
          echo "Username: admin"
          echo "Password: ${{ env.GRAFANA_ADMIN_PASSWORD }}"
          echo "=============================================="
          
          # Keep alive for 30 minutes
          sleep 1800

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: ${{ env.CLUSTER_SCAN_OUTPUT }}
          retention-days: 3
